# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage Corporation <containers@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: Docker Build & Validate

on:
  workflow_call:
    inputs:
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'
      image_namespace:
        description: 'Container image namespace'
        required: false
        type: string
        default: ${{ github.repository_owner }}
      build_platforms:
        description: 'Build platforms'
        required: false
        type: string
        default: 'linux/amd64'
      push_image:
        description: 'Whether to push the built image'
        required: false
        type: boolean
        default: false
      enable_security_scan:
        description: 'Enable security scanning with Trivy'
        required: false
        type: boolean
        default: true
      enable_hadolint:
        description: 'Enable Dockerfile linting with Hadolint'
        required: false
        type: boolean
        default: true
      enable_attestations:
        description: 'Enable build attestations'
        required: false
        type: boolean
        default: false
      containers_path:
        description: 'Path to containers directory'
        required: false
        type: string
        default: 'library'
      timeout_minutes:
        description: 'Job timeout in minutes'
        required: false
        type: number
        default: 60
      max_parallel:
        description: 'Maximum parallel builds'
        required: false
        type: number
        default: 3
      containers_filter:
        description: 'Filter for specific containers'
        required: false
        type: string
        default: ''
      force_all:
        description: 'Force build all containers'
        required: false
        type: boolean
        default: false
    outputs:
      built_containers:
        description: 'List of built containers'
        value: ${{ jobs.build-summary.outputs.built_containers }}
      build_success:
        description: 'Whether all builds succeeded'
        value: ${{ jobs.build-summary.outputs.build_success }}

# Use restrictive default permissions
permissions:
  contents: read

jobs:
  # Matrix generation job to discover containers to build
  discover-containers:
    runs-on: ubuntu-latest
    name: Discover Containers
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
      has_changes: ${{ steps.discover.outputs.has_changes }}
      container_count: ${{ steps.discover.outputs.container_count }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        if: ${{ !inputs.force_all }}
        uses: step-security/changed-files@95b56dadb92a30ca9036f16423fd3c088a71ee94 # v46.0.5
        with:
          files: |
            ${{ inputs.containers_path }}/**
          files_ignore: |
            **/*.md
            **/*.txt
            **/LICENSE
            .github/**

      - name: Discover containers
        id: discover
        shell: bash
        run: |
          containers_path="${{ inputs.containers_path }}"
          containers_filter="${{ inputs.containers_filter }}"
          force_all="${{ inputs.force_all }}"
          changed_files="${{ steps.changed-files.outputs.all_changed_files }}"
          
          echo "Discovering containers in $containers_path"
          
          # Create matrix array
          matrix='[]'
          container_count=0
          
          # Find all Dockerfiles
          while IFS= read -r -d '' dockerfile; do
            container_dir=$(dirname "$dockerfile")
            container_name=$(basename "$container_dir")
            
            # Apply filter if specified
            if [[ -n "$containers_filter" && "$container_name" != *"$containers_filter"* ]]; then
              echo "Skipping $container_name (doesn't match filter: $containers_filter)"
              continue
            fi
            
            # Check if we should build this container
            should_build=false
            
            if [[ "$force_all" == "true" ]]; then
              should_build=true
              echo "Building $container_name (force_all enabled)"
            elif [[ -z "$changed_files" ]]; then
              should_build=true
              echo "Building $container_name (no changed files detected, building all)"
            else
              # Check if any changed files are in this container's directory
              while IFS= read -r changed_file; do
                if [[ "$changed_file" == "$container_dir"* ]]; then
                  should_build=true
                  echo "Building $container_name (changed: $changed_file)"
                  break
                fi
              done <<< "$changed_files"
            fi
            
            if [[ "$should_build" == "true" ]]; then
              # Add to matrix
              matrix_entry=$(jq -n \
                --arg container "$container_dir" \
                --arg app "$container_name" \
                --arg version "latest" \
                --arg platform "linux" \
                '{container: $container, app: $app, version: $version, platform: $platform}')
              
              matrix=$(echo "$matrix" | jq ". += [$matrix_entry]")
              ((container_count++))
            fi
          done < <(find "$containers_path" -name "Dockerfile" -print0 2>/dev/null || true)
          
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
          echo "container_count=$container_count" >> "$GITHUB_OUTPUT"
          
          if [[ $container_count -gt 0 ]]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "Found $container_count containers to build"
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "No containers found to build"
          fi

  # Lint Dockerfiles
  lint-dockerfiles:
    runs-on: ubuntu-latest
    name: Lint Dockerfiles
    permissions:
      contents: read
      security-events: write # For SARIF upload
    needs: discover-containers
    if: inputs.enable_hadolint && needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@3fc49fb50d59c6ab7917a2e4195dba633e515b29 # v3.2.0
        with:
          dockerfile: ${{ matrix.container }}/Dockerfile
          format: sarif
          output-file: hadolint-results-${{ matrix.app }}.sarif
          no-fail: true

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        if: always()
        with:
          sarif_file: hadolint-results-${{ matrix.app }}.sarif
          category: hadolint-${{ matrix.app }}

  # Build and test container images
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}
    name: Build & Test Containers
    permissions:
      contents: read
      security-events: write # For security scan results
      packages: write # For pushing images if enabled
    needs: [discover-containers]
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      max-parallel: ${{ inputs.max_parallel }}
      matrix:
        include: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up QEMU
        if: contains(inputs.build_platforms, 'arm')
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Login to Container Registry
        if: inputs.push_image
        uses: docker/login-action@7403ea12dd9a8ed50fd44cd6d9cd2e7c85bd9b82 # v3.1.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build metadata
        id: metadata
        uses: docker/metadata-action@bfee93e2e15b9d3b6fe8e5e8ae7ca6b7e64c1b09 # v5.5.4
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_namespace }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ matrix.app }}
            org.opencontainers.image.description=Container for ${{ matrix.app }}
            org.opencontainers.image.vendor=Broadsage Corporation
            maintainer=containers@broadsage.com

      - name: Build and push container
        uses: docker/build-push-action@a7871ad4ae7b8c57fafaeec6dd77a4d0e3ab7a9b # v6.10.0
        with:
          context: ${{ matrix.container }}
          file: ${{ matrix.container }}/Dockerfile
          platforms: ${{ inputs.build_platforms }}
          push: ${{ inputs.push_image }}
          load: ${{ !inputs.push_image }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha,scope=build-${{ matrix.app }}
          cache-to: type=gha,mode=max,scope=build-${{ matrix.app }}
          provenance: ${{ inputs.enable_attestations }}
          sbom: ${{ inputs.enable_attestations }}

      - name: Run Trivy security scan
        if: inputs.enable_security_scan
        uses: aquasecurity/trivy-action@81b7c27a7c2deacf8e2a7d7ac2af5b5e6a4b0d35 # v0.33.0
        with:
          image-ref: ${{ inputs.registry }}/${{ inputs.image_namespace }}/${{ matrix.app }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.app }}.sarif'

      - name: Upload Trivy scan results
        if: inputs.enable_security_scan
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        with:
          sarif_file: 'trivy-results-${{ matrix.app }}.sarif'
          category: 'trivy-${{ matrix.app }}'

  # Summary job
  build-summary:
    runs-on: ubuntu-latest
    name: Build Summary
    permissions:
      contents: read
    needs: [discover-containers, lint-dockerfiles, build-and-test]
    if: always()
    outputs:
      built_containers: ${{ steps.summary.outputs.built_containers }}
      build_success: ${{ steps.summary.outputs.build_success }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Generate build summary
        id: summary
        shell: bash
        run: |
          discover_result="${{ needs.discover-containers.result }}"
          lint_result="${{ needs.lint-dockerfiles.result }}"
          build_result="${{ needs.build-and-test.result }}"
          has_changes="${{ needs.discover-containers.outputs.has_changes }}"
          container_count="${{ needs.discover-containers.outputs.container_count }}"
          
          echo "## 🐳 Container Build Summary" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$has_changes" == "true" ]]; then
            echo "📦 **Containers processed:** $container_count" >> $GITHUB_STEP_SUMMARY
            
            # Check results
            if [[ "$discover_result" == "success" ]]; then
              echo "✅ **Discovery:** Completed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Discovery:** Failed" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ inputs.enable_hadolint }}" == "true" ]]; then
              if [[ "$lint_result" == "success" ]]; then
                echo "✅ **Dockerfile Linting:** Passed" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ **Dockerfile Linting:** Failed or skipped" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "⏭️ **Dockerfile Linting:** Disabled" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "$build_result" == "success" ]]; then
              echo "✅ **Container Builds:** All successful" >> $GITHUB_STEP_SUMMARY
              echo "build_success=true" >> "$GITHUB_OUTPUT"
            else
              echo "❌ **Container Builds:** Some builds failed" >> $GITHUB_STEP_SUMMARY
              echo "build_success=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "⚠️ **No containers found to build**" >> $GITHUB_STEP_SUMMARY
            echo "build_success=true" >> "$GITHUB_OUTPUT"
          fi
          
          echo "built_containers=$container_count" >> "$GITHUB_OUTPUT"
          
          # Set exit code
          if [[ "$discover_result" == "success" && ("$has_changes" == "false" || "$build_result" == "success") ]]; then
            echo "✅ All operations completed successfully"
          else
            echo "❌ Some operations failed"
            exit 1
          fi