# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage Corporation <containers@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: Workflow Release

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/*.yml'
      - '!.github/workflows/workflow-release.yml'
      - '!.github/workflows/version-docs.yml'

permissions:
  contents: write
  pull-requests: read

env:
  # Global environment variables
  HARDEN_RUNNER_VERSION: "v2.13.1"
  CHECKOUT_VERSION: "v5.0.0" 
  RELEASE_ACTION_VERSION: "v2.0.8"

jobs:
  analyze-changes:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.detection.outputs.has-changes }}
      changed-workflows: ${{ steps.detection.outputs.changed-workflows }}
      version-bump: ${{ steps.version-bump.outputs.bump-type }}
      is-dependency-update: ${{ steps.version-bump.outputs.is-dependency-update }}
      latest-tag: ${{ steps.version-info.outputs.latest-tag }}
      new-version: ${{ steps.version-info.outputs.new-version }}
    steps:
      - name: Harden the runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 100  # Fetch enough history for version calculation

      - name: Detect workflow changes
        id: detection
        run: |
          set -euo pipefail
          
          echo "::group::Detecting workflow changes"
          
          # Get changed workflow files, excluding management workflows
          changed_files=$(git diff --name-only HEAD~1 HEAD -- '.github/workflows/*.yml' | \
            grep -v -E '(workflow-release|version-docs)\.yml$' || true)
          
          if [[ -z "$changed_files" ]]; then
            echo "has-changes=false" >> "$GITHUB_OUTPUT"
            echo "::notice::No workflow changes detected"
            exit 0
          fi
          
          # Create workflow list
          workflows=$(echo "$changed_files" | sed 's|.github/workflows/||g; s|\.yml$||g' | paste -sd, -)
          
          echo "has-changes=true" >> "$GITHUB_OUTPUT"
          echo "changed-workflows=$workflows" >> "$GITHUB_OUTPUT"
          
          echo "::notice::Changed workflows: $workflows"
          echo "::endgroup::"

      - name: Determine version bump and dependency status
        id: version-bump
        if: steps.detection.outputs.has-changes == 'true'
        run: |
          set -euo pipefail
          
          echo "::group::Analyzing commit for version bump"
          
          commit_message="${{ github.event.head_commit.message }}"
          actor="${{ github.actor }}"
          
          # Check for dependency update
          is_dep_update="false"
          if [[ "$actor" == "dependabot[bot]" ]] || [[ "$commit_message" =~ ^deps(\(.*\))?: ]]; then
            is_dep_update="true"
          fi
          
          # Determine version bump type using conventional commits
          bump_type="patch"  # Default
          if [[ "$commit_message" =~ BREAKING[[:space:]]CHANGE ]] || [[ "$commit_message" =~ ^[^:]*!: ]]; then
            bump_type="major"
            echo "::notice::Detected breaking change - major version bump"
          elif [[ "$commit_message" =~ ^feat(\(.*\))?: ]] || [[ "$commit_message" =~ ^add(\(.*\))?: ]]; then
            bump_type="minor"
            echo "::notice::Detected new feature - minor version bump"
          else
            echo "::notice::Detected patch change - patch version bump"
          fi
          
          echo "bump-type=$bump_type" >> "$GITHUB_OUTPUT"
          echo "is-dependency-update=$is_dep_update" >> "$GITHUB_OUTPUT"
          
          echo "::endgroup::"

      - name: Calculate version information
        id: version-info
        if: steps.detection.outputs.has-changes == 'true'
        run: |
          set -euo pipefail
          
          echo "::group::Calculating new version"
          
          # Get latest semantic version tag
          latest_tag=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | head -n1 || echo "v0.0.0")
          echo "latest-tag=$latest_tag" >> "$GITHUB_OUTPUT"
          echo "::notice::Latest tag: $latest_tag"
          
          # Parse current version
          if [[ "$latest_tag" == "v0.0.0" ]]; then
            major=0; minor=0; patch=0
          else
            version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version"
          fi
          
          # Calculate new version based on bump type
          bump_type="${{ steps.version-bump.outputs.bump-type }}"
          case "$bump_type" in
            "major")
              new_major=$((major + 1)); new_minor=0; new_patch=0 ;;
            "minor") 
              new_major=$major; new_minor=$((minor + 1)); new_patch=0 ;;
            "patch")
              new_major=$major; new_minor=$minor; new_patch=$((patch + 1)) ;;
          esac
          
          # Handle first version
          if [[ $major -eq 0 && $minor -eq 0 && $patch -eq 0 ]]; then
            new_major=1; new_minor=0; new_patch=0
          fi
          
          new_version="v$new_major.$new_minor.$new_patch"
          echo "new-version=$new_version" >> "$GITHUB_OUTPUT"
          echo "::notice::New version: $new_version"
          
          echo "::endgroup::"

  create-release:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Harden the runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0  # Full history for release notes

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        env:
          NEW_VERSION: ${{ needs.analyze-changes.outputs.new-version }}
          CHANGED_WORKFLOWS: ${{ needs.analyze-changes.outputs.changed-workflows }}
        run: |
          set -euo pipefail
          
          echo "::group::Creating release tag"
          
          # Check if tag already exists
          if git tag -l | grep -q "^$NEW_VERSION$"; then
            echo "::warning::Tag $NEW_VERSION already exists, skipping tag creation"
          else
            git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION - Updated workflows: $CHANGED_WORKFLOWS"
            git push origin "$NEW_VERSION"
            echo "::notice::Created and pushed tag: $NEW_VERSION"
          fi
          
          echo "::endgroup::"

      - name: Generate release notes
        id: release-notes
        env:
          VERSION: ${{ needs.analyze-changes.outputs.new-version }}
          BUMP_TYPE: ${{ needs.analyze-changes.outputs.version-bump }}
          IS_DEP_UPDATE: ${{ needs.analyze-changes.outputs.is-dependency-update }}
          CHANGED_WORKFLOWS: ${{ needs.analyze-changes.outputs.changed-workflows }}
          LATEST_TAG: ${{ needs.analyze-changes.outputs.latest-tag }}
        run: |
          set -euo pipefail
          
          echo "::group::Generating release notes"
          
          # Create release notes file
          cat > release_notes.md << 'EOF'
          ## What's Changed
          
          EOF
          
          # Add version bump context with appropriate emoji and messaging
          case "$BUMP_TYPE" in
            "major")
              echo "🚨 **Breaking Changes** - Major version release with potential breaking changes." >> release_notes.md ;;
            "minor")
              echo "✨ **New Features** - Minor version release with new functionality." >> release_notes.md ;;
            "patch")
              echo "🐛 **Fixes & Improvements** - Patch release with bug fixes and improvements." >> release_notes.md ;;
          esac
          echo "" >> release_notes.md
          
          # List updated workflows
          echo "### 📝 Updated Workflows" >> release_notes.md
          echo "" >> release_notes.md
          for workflow in ${CHANGED_WORKFLOWS//,/ }; do
            echo "- \`${workflow// /}.yml\`" >> release_notes.md
          done
          echo "" >> release_notes.md
          
          # Add recent commits
          echo "### 📋 Changes in This Release" >> release_notes.md
          echo "" >> release_notes.md
          
          # Handle case where LATEST_TAG might be v0.0.0 or empty
          if [[ "$LATEST_TAG" == "v0.0.0" ]]; then
            echo "- Initial release" >> release_notes.md
          else
            # Use git log with error handling
            if git log --oneline --pretty=format:"- %s" "$LATEST_TAG"..HEAD | head -10 >> release_notes.md 2>/dev/null; then
              echo "" >> release_notes.md
            else
              echo "- Updated workflows and configurations" >> release_notes.md
            fi
          fi
          echo "" >> release_notes.md
          
          # Analyze GitHub Actions updates
          echo "### 🔄 GitHub Actions Updates" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get action changes with improved parsing and error handling
          set +e  # Temporarily disable exit on error for git diff
          action_changes=$(git diff "$LATEST_TAG"..HEAD -- '.github/workflows/*.yml' | grep -E '^[-+].*uses:.*@' | sort -u)
          diff_exit_code=$?
          set -e  # Re-enable exit on error
          
          if [[ $diff_exit_code -ne 0 ]] || [[ -z "$action_changes" ]]; then
            echo "No GitHub Actions version changes in this release." >> release_notes.md
          else
            echo "The following GitHub Actions have been updated:" >> release_notes.md
            echo "" >> release_notes.md
            
            # Process changes more efficiently with error handling
            declare -A old_versions new_versions
            
            while IFS= read -r line; do
              if [[ -n "$line" ]]; then
                if [[ "$line" =~ ^-[[:space:]]*uses:[[:space:]]*([^@]+)@(.+) ]]; then
                  old_versions["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
                elif [[ "$line" =~ ^+[[:space:]]*uses:[[:space:]]*([^@]+)@(.+) ]]; then
                  new_versions["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
                fi
              fi
            done <<< "$action_changes"
            
            # Generate action update details with error handling
            if [[ ${#new_versions[@]} -gt 0 ]]; then
              for action in "${!new_versions[@]}"; do
                if [[ -n "${old_versions[$action]:-}" ]]; then
                  old_ver="${old_versions[$action]}"
                  new_ver="${new_versions[$action]}"
                  
                  echo "#### 🏷️ \`$action\`" >> release_notes.md
                  echo "- **Previous:** \`$old_ver\`" >> release_notes.md  
                  echo "- **Current:** \`$new_ver\`" >> release_notes.md
                  
                  # Determine change type with better error handling
                  if [[ "$old_ver" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
                    old_major=${BASH_REMATCH[1]} old_minor=${BASH_REMATCH[2]} old_patch=${BASH_REMATCH[3]}
                    if [[ "$new_ver" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
                      new_major=${BASH_REMATCH[1]} new_minor=${BASH_REMATCH[2]} new_patch=${BASH_REMATCH[3]}
                      
                      if [[ $new_major -gt $old_major ]]; then
                        echo "- **Change Type:** 🚨 Major version update (potential breaking changes)" >> release_notes.md
                      elif [[ $new_minor -gt $old_minor ]]; then
                        echo "- **Change Type:** ✨ Minor version update (new features)" >> release_notes.md
                      elif [[ $new_patch -gt $old_patch ]]; then
                        echo "- **Change Type:** 🐛 Patch version update (bug fixes, security patches)" >> release_notes.md
                      else
                        echo "- **Change Type:** 🔄 Version update" >> release_notes.md
                      fi
                    fi
                  fi
                  
                  # Add changelog link
                  repo_path=$(echo "$action" | cut -d'/' -f1-2)
                  echo "- **Details:** [View changelog](https://github.com/$repo_path/compare/$old_ver...$new_ver)" >> release_notes.md
                  echo "" >> release_notes.md
                fi
              done
            else
              echo "No action version changes detected in this release." >> release_notes.md
            fi
          fi
          echo "" >> release_notes.md
          
          # Add dependency update notice if applicable
          if [[ "$IS_DEP_UPDATE" == "true" ]]; then
            echo "### 🔄 Dependency Updates" >> release_notes.md
            echo "" >> release_notes.md
            echo "This release includes automated dependency updates and security patches." >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Add usage instructions
          cat >> release_notes.md << USAGE_EOF
          ### 🚀 Usage
          
          Pin to this specific version for stability:
          
          \`\`\`yaml
          uses: broadsage-containers/docker-ops/.github/workflows/[workflow-name].yml@$VERSION
          \`\`\`
          
          Or use the latest version (receives automatic updates):
          
          \`\`\`yaml
          uses: broadsage-containers/docker-ops/.github/workflows/[workflow-name].yml@main
          \`\`\`
          
          ### 📚 Available Workflows
          
          | Workflow | Purpose |
          |----------|---------|
          | \`pr-build-validate.yml\` | Pull request validation and testing |
          | \`pr-build-publish.yml\` | Build and publish container images |
          | \`quality-gate.yml\` | Code quality and security analysis |
          | \`security-scorecard.yml\` | OpenSSF security scorecard |
          | \`dependency-review.yml\` | Dependency vulnerability scanning |
          | \`community-management.yml\` | Community automation |
          
          **Full Changelog**: https://github.com/broadsage-containers/docker-ops/compare/$LATEST_TAG...$VERSION
          USAGE_EOF
          
          echo "notes-file=release_notes.md" >> "$GITHUB_OUTPUT"
          echo "::notice::Generated release notes"
          echo "::endgroup::"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.analyze-changes.outputs.new-version }}
          name: ${{ needs.analyze-changes.outputs.new-version }}
          body_path: ${{ steps.release-notes.outputs.notes-file }}
          draft: false
          prerelease: false
          make_latest: true

      - name: Log release completion
        env:
          VERSION: ${{ needs.analyze-changes.outputs.new-version }}
          WORKFLOWS: ${{ needs.analyze-changes.outputs.changed-workflows }}
        run: |
          echo "::notice::🚀 Successfully created release $VERSION"
          echo "::notice::📝 Updated workflows: $WORKFLOWS"
          echo "::notice::🔗 View release at: https://github.com/broadsage-containers/docker-ops/releases/tag/$VERSION"