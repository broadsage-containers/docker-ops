# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage Corporation <containers@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: Workflow-Specific Release

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/*.yml'
      - '!.github/workflows/workflow-release.yml'
      - '!.github/workflows/version-docs.yml'

permissions:
  contents: write
  pull-requests: read

jobs:
  detect-changes:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      changed-workflows: ${{ steps.changes.outputs.workflows }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed workflows
        id: changes
        run: |
          echo "Detecting workflow changes..."
          echo "Commit range: HEAD~1..HEAD"
          
          # Debug: Show all changed files first
          all_changed=$(git diff --name-only HEAD~1 HEAD || true)
          echo "All changed files:"
          echo "$all_changed"
          echo "---"
          
          # Get changed files in the workflows directory (excluding this workflow and version-docs)
          # Use more explicit path matching to ensure we catch all workflow files
          changed_files=$(git diff --name-only HEAD~1 HEAD | grep "^\.github/workflows/.*\.yml$" | grep -v -e "workflow-release.yml" -e "version-docs.yml" || true)
          
          if [[ -z "$changed_files" ]]; then
            echo "No workflow changes detected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changed workflow files:"
          echo "$changed_files"
          echo "---"
          
          # Extract workflow names (without .yml extension)
          workflows=""
          for file in $changed_files; do
            echo "Processing file: $file"
            if [[ $file == *.yml ]]; then
              workflow_name=$(basename "$file" .yml)
              echo "Extracted workflow name: $workflow_name"
              if [[ -n "$workflows" ]]; then
                workflows="$workflows,$workflow_name"
              else
                workflows="$workflow_name"
              fi
            fi
          done
          
          echo "Changed workflows: $workflows"
          echo "workflows=$workflows" >> $GITHUB_OUTPUT
          echo "has-changes=true" >> $GITHUB_OUTPUT
  determine-version-bump:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    outputs:
      version-bump: ${{ steps.bump.outputs.bump-type }}
      is-dependency-update: ${{ steps.check-deps.outputs.is-dependency-update }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - name: Check if dependency update
        id: check-deps
        run: |
          # Check if this is a Dependabot PR or dependency-related commit
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]] || 
             [[ "${{ github.event.head_commit.message }}" =~ ^deps(\(.*\))?: ]]; then
            echo "is-dependency-update=true" >> $GITHUB_OUTPUT
            echo "This is a dependency update"
          else
            echo "is-dependency-update=false" >> $GITHUB_OUTPUT
            echo "This is not a dependency update"
          fi
      - name: Determine version bump type
        id: bump
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          message="$commit_message"
          
          echo "Analyzing commit message: $message"
          
          # Check for breaking changes
          if [[ "$message" =~ BREAKING.CHANGE ]] || 
             [[ "$message" =~ ^[^:]*!: ]] ||
             [[ "$message" =~ ^feat!: ]] ||
             [[ "$message" =~ ^fix!: ]]; then
            echo "bump-type=major" >> $GITHUB_OUTPUT
            echo "Detected BREAKING CHANGE - major version bump"
          # Check for new features
          elif [[ "$message" =~ ^feat(\(.*\))?: ]] ||
               [[ "$message" =~ ^add(\(.*\))?: ]]; then
            echo "bump-type=minor" >> $GITHUB_OUTPUT
            echo "Detected new feature - minor version bump"
          # Everything else is patch (fixes, deps, docs, etc.)
          else
            echo "bump-type=patch" >> $GITHUB_OUTPUT
            echo "Detected patch change - patch version bump"
          fi
  create-release:
    needs: [detect-changes, determine-version-bump]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Get latest version
        id: latest
        run: |
          # Get the latest semantic version tag (sorted properly)
          latest_tag=$(git tag -l "v*" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1 || echo "v0.0.0")
          echo "latest-tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Current latest tag: $latest_tag"
          
          # Verify this tag exists and is reachable
          if [[ "$latest_tag" != "v0.0.0" ]] && ! git rev-parse --verify "$latest_tag" >/dev/null 2>&1; then
            echo "Warning: Latest tag $latest_tag not found, falling back to v0.0.0"
            latest_tag="v0.0.0"
            echo "latest-tag=$latest_tag" >> $GITHUB_OUTPUT
          fi
      - name: Calculate new version
        id: version
        run: |
          latest_tag="${{ steps.latest.outputs.latest-tag }}"
          bump_type="${{ needs.determine-version-bump.outputs.version-bump }}"
          
          # Remove 'v' prefix and split version
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          
          # Default to 0 if parsing fails
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}
          
          echo "Current version: $major.$minor.$patch"
          echo "Bump type: $bump_type"
          
          # Calculate new version based on bump type
          case $bump_type in
            "major")
              new_major=$((major + 1))
              new_minor=0
              new_patch=0
              ;;
            "minor")
              new_major=$major
              new_minor=$((minor + 1))
              new_patch=0
              ;;
            "patch")
              new_major=$major
              new_minor=$minor
              new_patch=$((patch + 1))
              ;;
          esac
          
          new_version="v$new_major.$new_minor.$new_patch"
          major_tag="v$new_major"
          
          echo "new-version=$new_version" >> $GITHUB_OUTPUT
          echo "major-tag=$major_tag" >> $GITHUB_OUTPUT
          
          echo "New version will be: $new_version"
          echo "Major tag: $major_tag"
      - name: Generate release notes
        id: notes
        run: |
          workflows="${{ needs.detect-changes.outputs.changed-workflows }}"
          version="${{ steps.version.outputs.new-version }}"
          bump_type="${{ needs.determine-version-bump.outputs.version-bump }}"
          is_dep_update="${{ needs.determine-version-bump.outputs.is-dependency-update }}"
          
          # Create clean, minimal release notes
          cat > release_notes.md << EOF
          ## What's Changed
          
          Updated workflows: **$workflows**
          
          EOF
          
          # Get meaningful commits since last release with clickable links
          last_tag="${{ steps.latest.outputs.latest-tag }}"
          
          # Get key changes, filtered and limited
          if [[ "$last_tag" != "v0.0.0" ]]; then
            key_commits=$(git log --oneline --format="format:* [%h](https://github.com/broadsage-containers/docker-ops/commit/%H) %s" "$last_tag"..HEAD -- .github/workflows/ | grep -v -E "chore:|docs:|style:|refactor:|test:" | head -5 || echo "")
          else
            key_commits=$(git log --oneline --format="format:* [%h](https://github.com/broadsage-containers/docker-ops/commit/%H) %s" -- .github/workflows/ | grep -v -E "chore:|docs:|style:|refactor:|test:" | head -5 || echo "")
          fi
          
          if [[ -n "$key_commits" ]]; then
            echo "$key_commits" >> release_notes.md
          else
            echo "* Minor improvements and bug fixes" >> release_notes.md
          fi
          
          cat >> release_notes.md << EOF
          
          ## Usage
          
          \`\`\`yaml
          uses: broadsage-containers/docker-ops/.github/workflows/{workflow}.yml@$version
          \`\`\`
          
          [Full Changelog](https://github.com/broadsage-containers/docker-ops/compare/${{ steps.latest.outputs.latest-tag }}...$version)
          EOF
          
          echo "Generated release notes:"
          cat release_notes.md
      - name: Create and push tags
        run: |
          new_version="${{ steps.version.outputs.new-version }}"
          major_tag="${{ steps.version.outputs.major-tag }}"
          
          echo "Creating semantic version tags: $new_version, $major_tag"
          
          # Semantic versions should be unique - if it exists, something is wrong
          if git rev-parse --verify "$new_version" >/dev/null 2>&1; then
            echo "❌ ERROR: Semantic version tag $new_version already exists!"
            echo "This indicates an issue with version calculation logic."
            echo "Expected: Each semantic version should be unique"
            git tag -l "v*" | sort -V | tail -5
            exit 1
          fi
          
          # Create the unique semantic version tag
          echo "✅ Creating semantic version tag: $new_version"
          git tag -a "$new_version" -m "Release $new_version - workflow updates"
          
          # Update major version tag (this one can be moved/updated)
          echo "🔄 Updating major version tag: $major_tag"
          git tag -f -a "$major_tag" -m "Major version $major_tag (latest: $new_version)"
          
          # Push both tags
          echo "📤 Pushing tags to remote..."
          git push origin "$new_version"
          git push --force origin "$major_tag"
          
          echo "✅ Successfully created and pushed tags:"
          echo "  📌 Semantic version: $new_version (unique, permanent)"
          echo "  🔄 Major version: $major_tag (moveable, points to latest)"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new-version }}
          name: Release ${{ steps.version.outputs.new-version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-consumers:
    needs: [detect-changes, create-release]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify about release
        run: |
          workflows="${{ needs.detect-changes.outputs.changed-workflows }}"
          echo "🚀 New release created for workflows: $workflows"
          echo "📝 Consuming repositories should consider updating their workflow references"
          echo "🔒 For maximum stability, pin to specific versions"