# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage Corporation <containers@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: Workflow-Specific Release

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/*.yml'
      - '!.github/workflows/workflow-release.yml'
      - '!.github/workflows/version-docs.yml'

permissions:
  contents: write
  pull-requests: read

jobs:
  detect-changes:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      changed-workflows: ${{ steps.changes.outputs.workflows }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 2

      - name: Detect changed workflows
        id: changes
        run: |
          echo "Detecting workflow changes..."
          
          # Get changed workflow files (exclude management workflows)
          changed_files=$(git diff --name-only HEAD~1 HEAD -- '.github/workflows/*.yml' | \
            grep -v -E '(workflow-release|version-docs)\.yml$' || true)
          
          if [[ -z "$changed_files" ]]; then
            echo "No workflow changes detected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changed files:"
          echo "$changed_files"
          
          # Create simple comma-separated list of workflow names
          workflows=""
          for file in $changed_files; do
            if [[ $file == *.yml ]]; then
              workflow_name=$(basename "$file" .yml)
              if [[ -n "$workflows" ]]; then
                workflows="$workflows, $workflow_name"
              else
                workflows="$workflow_name"
              fi
            fi
          done
          
          echo "Changed workflows: $workflows"
          echo "workflows=$workflows" >> $GITHUB_OUTPUT
          echo "has-changes=true" >> $GITHUB_OUTPUT

  determine-version-bump:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    outputs:
      version-bump: ${{ steps.bump.outputs.bump-type }}
      is-dependency-update: ${{ steps.check-deps.outputs.is-dependency-update }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 100

      - name: Check if dependency update
        id: check-deps
        run: |
          # Check if this is a Dependabot PR or dependency-related commit
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]] || 
             [[ "${{ github.event.head_commit.message }}" =~ ^deps(\(.*\))?: ]]; then
            echo "is-dependency-update=true" >> $GITHUB_OUTPUT
            echo "This is a dependency update"
          else
            echo "is-dependency-update=false" >> $GITHUB_OUTPUT
            echo "This is not a dependency update"
          fi

      - name: Determine version bump type
        id: bump
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          message="$commit_message"
          
          echo "Analyzing commit message: $message"
          
          # Check for breaking changes
          if [[ "$message" =~ BREAKING.CHANGE ]] || 
             [[ "$message" =~ ^[^:]*!: ]] ||
             [[ "$message" =~ ^feat!: ]] ||
             [[ "$message" =~ ^fix!: ]]; then
            echo "bump-type=major" >> $GITHUB_OUTPUT
            echo "Detected BREAKING CHANGE - major version bump"
          # Check for new features
          elif [[ "$message" =~ ^feat(\(.*\))?: ]] ||
               [[ "$message" =~ ^add(\(.*\))?: ]]; then
            echo "bump-type=minor" >> $GITHUB_OUTPUT
            echo "Detected new feature - minor version bump"
          # Everything else is patch (fixes, deps, docs, etc.)
          else
            echo "bump-type=patch" >> $GITHUB_OUTPUT
            echo "Detected patch change - patch version bump"
          fi

  create-unified-release:
    needs: [detect-changes, determine-version-bump]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Get latest repository version
        id: latest
        run: |
          echo "Getting latest repository version..."
          
          # Get the latest tag for the entire repository (semantic versioning)
          latest_tag=$(git tag -l --sort=-version:refname | grep "^v[0-9]*\.[0-9]*\.[0-9]*$" | head -n1 || echo "v0.0.0")
          echo "latest-tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest repository tag: $latest_tag"

      - name: Calculate new repository version
        id: version
        run: |
          latest_tag="${{ steps.latest.outputs.latest-tag }}"
          bump_type="${{ needs.determine-version-bump.outputs.version-bump }}"
          
          # Extract version from tag (remove 'v' prefix)
          if [[ "$latest_tag" == "v0.0.0" ]]; then
            # First version for repository
            version="0.0.0"
          else
            version=${latest_tag#v}
          fi
          
          # Split version
          IFS='.' read -r major minor patch <<< "$version"
          
          # Default to 0 if parsing fails
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}
          
          echo "Current repository version: $major.$minor.$patch"
          echo "Bump type: $bump_type"
          
          # Calculate new version based on bump type
          case $bump_type in
            "major")
              new_major=$((major + 1))
              new_minor=0
              new_patch=0
              ;;
            "minor")
              new_major=$major
              new_minor=$((minor + 1))
              new_patch=0
              ;;
            "patch")
              new_major=$major
              new_minor=$minor
              new_patch=$((patch + 1))
              ;;
          esac
          
          # For first version, start at 1.0.0
          if [[ "$major" == "0" && "$minor" == "0" && "$patch" == "0" ]]; then
            new_major=1
            new_minor=0
            new_patch=0
          fi
          
          new_version="v$new_major.$new_minor.$new_patch"
          
          echo "new-version=$new_version" >> $GITHUB_OUTPUT
          echo "New repository version will be: $new_version"

      - name: Create and push repository tag
        run: |
          new_version="${{ steps.version.outputs.new-version }}"
          changed_workflows="${{ needs.detect-changes.outputs.changed-workflows }}"
          
          echo "Creating unified tag for repository..."
          
          # Create single specific version tag for the entire repository
          git tag -a "$new_version" -m "Release $new_version - Updated workflows: $changed_workflows"
          
          # Push the tag
          git push origin "$new_version"
          
          echo "Created and pushed repository tag: $new_version"

      - name: Generate unified release notes
        id: notes
        run: |
          version="${{ steps.version.outputs.new-version }}"
          bump_type="${{ needs.determine-version-bump.outputs.version-bump }}"
          is_dep_update="${{ needs.determine-version-bump.outputs.is-dependency-update }}"
          changed_workflows="${{ needs.detect-changes.outputs.changed-workflows }}"
          
          # Create unified release notes
          cat > release_notes.md << EOF
          ## Docker Operations Workflows $version
          
          **Version Bump:** $bump_type  
          **Dependency Update:** $is_dep_update
          **Updated Workflows:** $changed_workflows
          
          ### Changes
          
          This release includes updates to the following workflow files:
          - $changed_workflows
          
          ### Improvements
          
          - Updated dependencies and security patches
          - Enhanced functionality and bug fixes
          - Improved performance and reliability
          - Security hardening and best practices
          
          ### Usage
          
          Use workflows from this specific version for maximum stability:
          
          \`\`\`yaml
          uses: broadsage-containers/docker-ops/.github/workflows/[workflow-name].yml@$version
          \`\`\`
          
          Or use the main branch for latest updates (higher risk):
          
          \`\`\`yaml
          uses: broadsage-containers/docker-ops/.github/workflows/[workflow-name].yml@main
          \`\`\`
          
          ### Available Workflows
          
          - \`pr-build-validate.yml\` - Pull request validation and testing
          - \`pr-build-publish.yml\` - Pull request build and publish
          - \`quality-gate.yml\` - Code quality and security checks
          - \`security-scorecard.yml\` - Security scorecard analysis
          - \`dependency-review.yml\` - Dependency security review
          - \`community-management.yml\` - Community management automation
          
          ### Full Changelog
          
          **Full Changelog**: https://github.com/broadsage-containers/docker-ops/compare/${{ steps.latest.outputs.latest-tag }}...$version
          EOF
          
          echo "Generated unified release notes"
          echo "notes-file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new-version }}
          name: "Docker Operations Workflows ${{ steps.version.outputs.new-version }}"
          body_path: ${{ steps.notes.outputs.notes-file }}
          draft: false
          prerelease: false
          make_latest: true

  notify-consumers:
    needs: [detect-changes, create-unified-release]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Notify about release
        run: |
          workflows="${{ needs.detect-changes.outputs.changed-workflows }}"
          echo "🚀 New unified release created for workflows: $workflows"
          echo "📝 Consuming repositories should consider updating their workflow references"
          echo "🔒 For maximum stability, pin to specific versions (e.g., @v1.2.3)"
          echo "⚡ For latest updates, use @main (higher risk but automatic updates)"