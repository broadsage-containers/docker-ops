# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage Corporation <containers@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: Workflow-Specific Release

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/*.yml'
      - '!.github/workflows/workflow-release.yml'
      - '!.github/workflows/version-docs.yml'

permissions:
  contents: write
  pull-requests: read

jobs:
  detect-changes:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      changed-workflows: ${{ steps.changes.outputs.workflows }}
      changed-workflows-array: ${{ steps.changes.outputs.workflows-array }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed workflows
        id: changes
        run: |
          echo "Detecting workflow changes..."
          
          # Get changed workflow files (exclude management workflows)
          changed_files=$(git diff --name-only HEAD~1 HEAD -- '.github/workflows/*.yml' | \
            grep -v -E '(workflow-release|version-docs)\.yml$' || true)
          
          if [[ -z "$changed_files" ]]; then
            echo "No workflow changes detected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changed files:"
          echo "$changed_files"
          
          # Check if changes are significant enough for a release
          significant_changes=false
          for file in $changed_files; do
            if [[ $file == *.yml ]]; then
              # Check if more than just comments/whitespace changed
              significant_lines=$(git diff HEAD~1 HEAD -- "$file" | grep -E '^[+-]' | grep -v -E '^[+-][[:space:]]*#' | grep -v -E '^[+-][[:space:]]*$' | wc -l || echo 0)
              echo "Significant lines changed in $file: $significant_lines"
              if [[ $significant_lines -gt 3 ]]; then
                significant_changes=true
                break
              fi
            fi
          done
          
          if [[ "$significant_changes" == "false" ]]; then
            echo "Changes are not significant enough for release (only comments/whitespace)"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract workflow names (without .yml extension)
          workflows=""
          workflows_array="["
          first=true
          
          for file in $changed_files; do
            if [[ $file == *.yml ]]; then
              workflow_name=$(basename "$file" .yml)
              if [[ -n "$workflows" ]]; then
                workflows="$workflows,$workflow_name"
              else
                workflows="$workflow_name"
              fi
              
              # Build JSON array for matrix
              if [[ "$first" == "true" ]]; then
                workflows_array="${workflows_array}\"$workflow_name\""
                first=false
              else
                workflows_array="${workflows_array},\"$workflow_name\""
              fi
            fi
          done
          
          workflows_array="${workflows_array}]"
          
          echo "Changed workflows: $workflows"
          echo "Changed workflows array: $workflows_array"
          echo "workflows=$workflows" >> $GITHUB_OUTPUT
          echo "workflows-array=$workflows_array" >> $GITHUB_OUTPUT
          echo "has-changes=true" >> $GITHUB_OUTPUT

  determine-version-bump:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    outputs:
      version-bump: ${{ steps.bump.outputs.bump-type }}
      is-dependency-update: ${{ steps.check-deps.outputs.is-dependency-update }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - name: Check if dependency update
        id: check-deps
        run: |
          # Check if this is a Dependabot PR or dependency-related commit
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]] || 
             [[ "${{ github.event.head_commit.message }}" =~ ^deps(\(.*\))?: ]]; then
            echo "is-dependency-update=true" >> $GITHUB_OUTPUT
            echo "This is a dependency update"
          else
            echo "is-dependency-update=false" >> $GITHUB_OUTPUT
            echo "This is not a dependency update"
          fi

      - name: Determine version bump type
        id: bump
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          message="$commit_message"
          
          echo "Analyzing commit message: $message"
          
          # Check for breaking changes
          if [[ "$message" =~ BREAKING.CHANGE ]] || 
             [[ "$message" =~ ^[^:]*!: ]] ||
             [[ "$message" =~ ^feat!: ]] ||
             [[ "$message" =~ ^fix!: ]]; then
            echo "bump-type=major" >> $GITHUB_OUTPUT
            echo "Detected BREAKING CHANGE - major version bump"
          # Check for new features
          elif [[ "$message" =~ ^feat(\(.*\))?: ]] ||
               [[ "$message" =~ ^add(\(.*\))?: ]]; then
            echo "bump-type=minor" >> $GITHUB_OUTPUT
            echo "Detected new feature - minor version bump"
          # Everything else is patch (fixes, deps, docs, etc.)
          else
            echo "bump-type=patch" >> $GITHUB_OUTPUT
            echo "Detected patch change - patch version bump"
          fi

  create-release:
    needs: [detect-changes, determine-version-bump]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Get latest release version
        id: latest
        run: |
          echo "Getting latest release version..."
          
          # Get the latest release tag (format: vMAJOR.MINOR.PATCH)
          latest_tag=$(git tag -l --sort=-version:refname | grep "^v[0-9]*\.[0-9]*\.[0-9]*$" | head -n1 || echo "v0.0.0")
          echo "latest-tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest release tag: $latest_tag"
          
          # Check cooldown period (prevent releases within 1 hour)
          if [[ "$latest_tag" != "v0.0.0" ]]; then
            latest_commit=$(git rev-list -n 1 "$latest_tag" 2>/dev/null || echo "")
            if [[ -n "$latest_commit" ]]; then
              latest_timestamp=$(git show -s --format=%ct "$latest_commit" 2>/dev/null || echo "0")
              current_timestamp=$(date +%s)
              time_diff=$((current_timestamp - latest_timestamp))
              
              echo "Time since last release: $time_diff seconds"
              
              # 3600 seconds = 1 hour cooldown
              if [[ $time_diff -lt 3600 ]]; then
                echo "⏰ Cooldown period active - last release was less than 1 hour ago"
                echo "cooldown-active=true" >> $GITHUB_OUTPUT
                exit 0
              fi
            fi
          fi
          
          echo "cooldown-active=false" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: version
        if: steps.latest.outputs.cooldown-active != 'true'
        run: |
          latest_tag="${{ steps.latest.outputs.latest-tag }}"
          bump_type="${{ needs.determine-version-bump.outputs.version-bump }}"
          
          # Extract version from tag (remove 'v')
          if [[ "$latest_tag" == "v0.0.0" ]]; then
            version="0.0.0"
          else
            version=${latest_tag#v}
          fi
          
          # Split version
          IFS='.' read -r major minor patch <<< "$version"
          
          # Default to 0 if parsing fails
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}
          
          echo "Current version: $major.$minor.$patch"
          echo "Bump type: $bump_type"
          
          # Calculate new version based on bump type
          case $bump_type in
            "major")
              new_major=$((major + 1))
              new_minor=0
              new_patch=0
              ;;
            "minor")
              new_major=$major
              new_minor=$((minor + 1))
              new_patch=0
              ;;
            "patch")
              new_major=$major
              new_minor=$minor
              new_patch=$((patch + 1))
              ;;
          esac
          
          # For first version, start at 0.1.0
          if [[ "$major" == "0" && "$minor" == "0" && "$patch" == "0" ]]; then
            new_major=0
            new_minor=1
            new_patch=0
          fi
          
          new_version="v$new_major.$new_minor.$new_patch"
          
          echo "new-version=$new_version" >> $GITHUB_OUTPUT
          echo "New version will be: $new_version"

      - name: Create and push release tag
        if: steps.latest.outputs.cooldown-active != 'true'
        run: |
          new_version="${{ steps.version.outputs.new-version }}"
          workflows="${{ needs.detect-changes.outputs.changed-workflows }}"
          
          echo "Creating release tag for workflows: $workflows"
          
          # Create single release tag
          git tag -a "$new_version" -m "Release $new_version - Updated workflows: $workflows"
          
          # Push tag
          git push origin "$new_version"
          
          echo "Created and pushed release tag: $new_version"

      - name: Generate release notes
        if: steps.latest.outputs.cooldown-active != 'true'
        id: notes
        run: |
          version="${{ steps.version.outputs.new-version }}"
          bump_type="${{ needs.determine-version-bump.outputs.version-bump }}"
          is_dep_update="${{ needs.determine-version-bump.outputs.is-dependency-update }}"
          workflows="${{ needs.detect-changes.outputs.changed-workflows }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## Docker Ops Workflows Release $version
          
          **Version Bump:** $bump_type  
          **Dependency Update:** $is_dep_update
          **Changed Workflows:** $workflows
          
          ### Changes
          
          This release includes updates to the following workflow files:
          EOF
          
          # Add each workflow to the notes
          IFS=',' read -ra WORKFLOW_ARRAY <<< "$workflows"
          for workflow in "${WORKFLOW_ARRAY[@]}"; do
            echo "- \`$workflow.yml\` - Enhanced functionality and bug fixes" >> release_notes.md
          done
          
          cat >> release_notes.md << EOF
          
          ### Usage
          
          Use this release version for any of the updated workflows:
          
          \`\`\`yaml
          uses: broadsage-containers/docker-ops/.github/workflows/[workflow-name].yml@$version
          \`\`\`
          
          ### Full Changelog
          
          **Full Changelog**: https://github.com/broadsage-containers/docker-ops/compare/${{ steps.latest.outputs.latest-tag }}...$version
          EOF
          
          echo "Generated release notes"
          echo "notes-file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.latest.outputs.cooldown-active != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new-version }}
          release_name: "Docker Ops Workflows ${{ steps.version.outputs.new-version }}"
          body_path: ${{ steps.notes.outputs.notes-file }}
          draft: false
          prerelease: false

  notify-consumers:
    needs: [detect-changes, create-release]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify about release
        run: |
          workflows="${{ needs.detect-changes.outputs.changed-workflows }}"
          echo "🚀 New release created for workflows: $workflows"
          echo "📝 Consuming repositories should consider updating their workflow references"
          echo "🔒 For maximum stability, pin to specific versions"