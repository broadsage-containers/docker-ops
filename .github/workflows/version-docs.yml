# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage Corporation <containers@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: Version Documentation

on:
  release:
    types: [published, released]
  workflow_run:
    workflows: ["Workflow-Specific Release"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to use for documentation update'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  update-version-docs:
    name: Update Version References
    runs-on: ubuntu-latest
    # Only run if manually triggered, on release events, or if the workflow_run was successful
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get latest version
        id: version
        run: |
          # Use manual input version if provided, otherwise get latest from releases/tags
          if [[ -n "${{ inputs.version }}" ]]; then
            LATEST_VERSION="${{ inputs.version }}"
            echo "Using manual version: $LATEST_VERSION"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            LATEST_VERSION="${{ github.event.release.tag_name }}"
            echo "Using release version: $LATEST_VERSION"
          else
            # Fallback to latest tag
            LATEST_VERSION=$(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
            echo "Using latest tag: $LATEST_VERSION"
          fi
          
          echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Extract major version (v1.2.3 -> v1)
          MAJOR_VERSION=$(echo $LATEST_VERSION | cut -d. -f1)
          echo "major=$MAJOR_VERSION" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Latest version: $LATEST_VERSION"
          echo "‚úÖ Major version: $MAJOR_VERSION"

      - name: Update README examples
        run: |
          echo "üîÑ Updating version references in README.md..."
          
          # Update README.md examples to use the latest specific version
          # Replace @v1.0.0 style versions with the new version
          sed -i.bak "s|@v[0-9]\+\.[0-9]\+\.[0-9]\+|@${{ steps.version.outputs.latest }}|g" README.md
          
          # Also handle any remaining @v1 style references
          sed -i.bak2 "s|@v[0-9]\+|@${{ steps.version.outputs.latest }}|g" README.md
          
          # Show changes
          if ! cmp -s README.md README.md.bak; then
            echo "üìù Changes made to README.md:"
            diff README.md.bak README.md || true
            rm -f README.md.bak README.md.bak2
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è  No changes needed in README.md"
            rm -f README.md.bak README.md.bak2
            echo "updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Create version file
        id: version-file
        run: |
          echo "üìÑ Creating VERSION.md documentation..."
          cat << EOF > VERSION.md
          # Version Information
          
          ## Current Release
          
          - **Latest Version**: ${{ steps.version.outputs.latest }}
          - **Major Version**: ${{ steps.version.outputs.major }}
          - **Release Date**: $(date -u '+%Y-%m-%d')
          
          ## Usage Recommendations
          
          ### üèÜ Production (Recommended)
          Pin to exact versions for maximum stability:
          \`\`\`yaml
          uses: broadsage-containers/docker-ops/.github/workflows/quality-gate.yml@${{ steps.version.outputs.latest }}
          uses: broadsage-containers/docker-ops/.github/workflows/pr-build-validate.yml@${{ steps.version.outputs.latest }}
          uses: broadsage-containers/docker-ops/.github/workflows/pr-build-publish.yml@${{ steps.version.outputs.latest }}
          \`\`\`
          
          ### ‚ö° Development
          Use main branch for latest features (higher risk):
          \`\`\`yaml
          uses: broadsage-containers/docker-ops/.github/workflows/quality-gate.yml@main
          uses: broadsage-containers/docker-ops/.github/workflows/pr-build-validate.yml@main
          uses: broadsage-containers/docker-ops/.github/workflows/pr-build-publish.yml@main
          \`\`\`
          
          ## Available Versions
          
          ### Recent Releases
          \`\`\`
          $(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -10)
          \`\`\`
          
          ## Resources
          
          - [Releases](https://github.com/broadsage-containers/docker-ops/releases) - Full changelog and release notes
          - [README](README.md) - Getting started guide
          
          ---
          *Generated automatically on $(date -u '+%Y-%m-%d %H:%M:%S UTC') from release ${{ steps.version.outputs.latest }}*
          EOF
          
          echo "‚úÖ VERSION.md created successfully"
          echo "version-file-created=true" >> $GITHUB_OUTPUT

      - name: Commit changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "üìù Committing documentation updates..."
            git add README.md VERSION.md
            git commit -m "docs: update version references to ${{ steps.version.outputs.latest }} [skip ci]"
            echo "üöÄ Pushing changes to repository..."
            git push
            echo "‚úÖ Version documentation updated successfully"
          else
            echo "‚ÑπÔ∏è  No documentation changes needed"
          fi