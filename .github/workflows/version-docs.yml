# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage Corporation <containers@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: Version Documentation

# NOTE: This workflow is primarily for manual documentation updates.
# Automatic version updates happen in workflow-release.yml when releases are created.

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to use for documentation update'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  update-version-docs:
    name: Manual Version Documentation Update
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Validate version input
        run: |
          VERSION="${{ inputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v1.2.3"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Update documentation versions
        run: |
          echo "üîÑ Updating version references in documentation files..."
          
          # Get the version from input
          NEW_VERSION="${{ inputs.version }}"
          echo "Updating docs to version: $NEW_VERSION"
          
          # Function to update version references in a file
          update_file_versions() {
            local file="$1"
            if [[ ! -f "$file" ]]; then
              return 0
            fi
            
            echo "üìÑ Updating version references in $file..."
            
            # Create backup
            cp "$file" "$file.bak"
            
            # Update specific workflow references
            for workflow in quality-gate security-scorecard dependency-review pr-build-validate pr-build-publish community-management workflow-release version-docs; do
              sed -i "s|broadsage-containers/docker-ops/\.github/workflows/${workflow}\.yml@v[0-9]\+\.[0-9]\+\.[0-9]\+|broadsage-containers/docker-ops/.github/workflows/${workflow}.yml@${NEW_VERSION}|g" "$file"
              sed -i "s|broadsage-containers/docker-ops/\.github/workflows/${workflow}\.yml@v[0-9]\+|broadsage-containers/docker-ops/.github/workflows/${workflow}.yml@${NEW_VERSION}|g" "$file"
            done
            
            # Generic fallback patterns
            sed -i "s|@v[0-9]\+\.[0-9]\+\.[0-9]\+|@${NEW_VERSION}|g" "$file"
            sed -i "s|@v[0-9]\+|@${NEW_VERSION}|g" "$file"
            
            # Check if file was changed
            if ! cmp -s "$file" "$file.bak"; then
              echo "‚úÖ Updated version references in $file"
              rm -f "$file.bak"
              return 1  # File was updated
            else
              echo "‚ÑπÔ∏è  No changes needed in $file"
              rm -f "$file.bak"
              return 0  # File was not updated
            fi
          }
          
          # Update files
          FILES_UPDATED=0
          
          # Update README.md
          if update_file_versions "README.md"; then
            ((FILES_UPDATED++))
          fi
          
          # Update other documentation files if they exist
          DOC_FILES=(
            "docs/README.md"
            "docs/USAGE.md"
            "docs/EXAMPLES.md"
            ".github/PULL_REQUEST_TEMPLATE.md"
            "CONTRIBUTING.md"
            "examples/README.md"
          )
          
          for doc_file in "${DOC_FILES[@]}"; do
            if update_file_versions "$doc_file"; then
              ((FILES_UPDATED++))
            fi
          done
          
          echo "üìä Total files updated: $FILES_UPDATED"

      - name: Commit changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "üìù Committing documentation updates..."
            git add -A
            git commit -m "docs: manual update version references to ${{ inputs.version }} [skip ci]"
            echo "üöÄ Pushing changes to repository..."
            git push
            echo "‚úÖ Manual version documentation update completed successfully"
          else
            echo "‚ÑπÔ∏è  No documentation changes needed"
          fi